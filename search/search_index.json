{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfa5 Video Sync \u00b6 A Python tool to synchronize NSP data with camera recordings. Welcome to the official documentation for video-sync . This tool allows you to synchronize Neural Signal Processing (NSP) data with camera recordings. It processes NEV and NS5 files , aligns timestamps with camera JSON metadata , slices video based on valid frames, and synchronizes audio with video. \ud83d\udcd6 Documentation Overview \u00b6 Installation Configuration Usage Guide Features EMU Camera Serials FAQ License","title":"Home"},{"location":"#video-sync","text":"A Python tool to synchronize NSP data with camera recordings. Welcome to the official documentation for video-sync . This tool allows you to synchronize Neural Signal Processing (NSP) data with camera recordings. It processes NEV and NS5 files , aligns timestamps with camera JSON metadata , slices video based on valid frames, and synchronizes audio with video.","title":"\ud83c\udfa5 Video Sync"},{"location":"#documentation-overview","text":"Installation Configuration Usage Guide Features EMU Camera Serials FAQ License","title":"\ud83d\udcd6 Documentation Overview"},{"location":"configuration/","text":"\u2699\ufe0f Configuration \u00b6 Before running video-sync , you need to configure it using a YAML configuration file. A sample configuration file is provided: cp config.example.yaml config.yaml","title":"Configuration"},{"location":"configuration/#configuration","text":"Before running video-sync , you need to configure it using a YAML configuration file. A sample configuration file is provided: cp config.example.yaml config.yaml","title":"\u2699\ufe0f Configuration"},{"location":"emu-cameras/","text":"\ud83d\udcf7 EMU Camera Serials \u00b6 List of supported EMU camera serial numbers: Camera Serial Position 18486634 F1 23512908 F2 18486644 F3 18486638 B1 23512014 B2 23512906 R1 23512012 R2 23505577 R3 Use these serials when mapping cameras for video synchronization.","title":"EMU Camera Serials"},{"location":"emu-cameras/#emu-camera-serials","text":"List of supported EMU camera serial numbers: Camera Serial Position 18486634 F1 23512908 F2 18486644 F3 18486638 B1 23512014 B2 23512906 R1 23512012 R2 23505577 R3 Use these serials when mapping cameras for video synchronization.","title":"\ud83d\udcf7 EMU Camera Serials"},{"location":"faq/","text":"\u2753 FAQ \u00b6 1. What file formats are supported? \u00b6 video-sync supports NEV, NS5, and JSON files for synchronization. 2. Why does my video output have missing frames? \u00b6 Ensure your FFmpeg installation is up-to-date and that your config.yaml is correctly set. 3. How do I change the output format? \u00b6 Modify the output_format field in your config.yaml : ```yaml output_format: \"mp4\"","title":"FAQ"},{"location":"faq/#faq","text":"","title":"\u2753 FAQ"},{"location":"faq/#1-what-file-formats-are-supported","text":"video-sync supports NEV, NS5, and JSON files for synchronization.","title":"1. What file formats are supported?"},{"location":"faq/#2-why-does-my-video-output-have-missing-frames","text":"Ensure your FFmpeg installation is up-to-date and that your config.yaml is correctly set.","title":"2. Why does my video output have missing frames?"},{"location":"faq/#3-how-do-i-change-the-output-format","text":"Modify the output_format field in your config.yaml : ```yaml output_format: \"mp4\"","title":"3. How do I change the output format?"},{"location":"features/","text":"\ud83c\udfd7\ufe0f Features \u00b6 video-sync provides the following features: \u2714\ufe0f Synchronizes NEV and NS5 files with camera recordings \u2714\ufe0f Slices video based on valid frames \u2714\ufe0f Aligns audio with video for precise synchronization \u2714\ufe0f Supports configurable processing options \u2714\ufe0f Efficient and scalable for large datasets","title":"Features"},{"location":"features/#features","text":"video-sync provides the following features: \u2714\ufe0f Synchronizes NEV and NS5 files with camera recordings \u2714\ufe0f Slices video based on valid frames \u2714\ufe0f Aligns audio with video for precise synchronization \u2714\ufe0f Supports configurable processing options \u2714\ufe0f Efficient and scalable for large datasets","title":"\ud83c\udfd7\ufe0f Features"},{"location":"installation/","text":"\ud83d\udce5 Installation \u00b6 Prerequisites \u00b6 Before installing video-sync , ensure you have the following dependencies: Conda (for environment management) FFmpeg (for video and audio processing) Installing FFmpeg on Linux \u00b6 For Ubuntu/Debian : sudo apt update sudo apt install ffmpeg For RHEL(with EPEL enabled) sudo yum install epel-release sudo yum install ffmpeg Installing video-sync \u00b6 Clone the repository and set up the environment: git clone git@github.com:BCM-Neurosurgery/video-sync.git cd video-sync Create and activate the Conda environment, then install dependencies: conda env create -f environment.yml conda activate videosync pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"\ud83d\udce5 Installation"},{"location":"installation/#prerequisites","text":"Before installing video-sync , ensure you have the following dependencies: Conda (for environment management) FFmpeg (for video and audio processing)","title":"Prerequisites"},{"location":"installation/#installing-ffmpeg-on-linux","text":"For Ubuntu/Debian : sudo apt update sudo apt install ffmpeg For RHEL(with EPEL enabled) sudo yum install epel-release sudo yum install ffmpeg","title":"Installing FFmpeg on Linux"},{"location":"installation/#installing-video-sync","text":"Clone the repository and set up the environment: git clone git@github.com:BCM-Neurosurgery/video-sync.git cd video-sync Create and activate the Conda environment, then install dependencies: conda env create -f environment.yml conda activate videosync pip install .","title":"Installing video-sync"},{"location":"license/","text":"\ud83d\udcdc License \u00b6 This project is licensed under the BSD-3-Clause License .","title":"License"},{"location":"license/#license","text":"This project is licensed under the BSD-3-Clause License .","title":"\ud83d\udcdc License"},{"location":"usage/","text":"\ud83d\ude80 Usage Guide \u00b6 Running video-sync \u00b6 Activate the Conda environment and run: conda activate videosync stitch-videos --config path/to/config.yaml Example Command stitch-videos --config config.yaml","title":"Usage"},{"location":"usage/#usage-guide","text":"","title":"\ud83d\ude80 Usage Guide"},{"location":"usage/#running-video-sync","text":"Activate the Conda environment and run: conda activate videosync stitch-videos --config path/to/config.yaml Example Command stitch-videos --config config.yaml","title":"Running video-sync"},{"location":"api/","text":"\ud83d\udee0 API Reference \u00b6 This section provides documentation for all scripts used in video-sync . DataPoool Module Nev Module Nsx Module Nsx Module Video Module Videojson Module Pathutils Module Utils Module","title":"Overview"},{"location":"api/#api-reference","text":"This section provides documentation for all scripts used in video-sync . DataPoool Module Nev Module Nsx Module Nsx Module Video Module Videojson Module Pathutils Module Utils Module","title":"\ud83d\udee0 API Reference"},{"location":"api/datapool/","text":"\ud83d\udcc4 DataPool API Documentation \u00b6 This section provides detailed documentation for pyvideosync.data_pool . \ud83d\udccc DataPool Class \u00b6 Manages NSP and video data for integrity verification and statistics. Attributes: nsp_dir ( str ) \u2013 Directory containing NSP files. cam_recording_dir ( str ) \u2013 Directory containing camera recordings. nev_pool ( NevPool ) \u2013 Stores NEV files. nsx_pool ( NsxPool ) \u2013 Stores NS5/NS3 files. video_pool ( VideoPool ) \u2013 Stores video files. video_json_pool ( VideoJsonPool ) \u2013 Stores video metadata. video_file_pool ( VideoFilesPool ) \u2013 Stores all video-related files. Source code in pyvideosync/data_pool.py class DataPool: \"\"\"Manages NSP and video data for integrity verification and statistics. Attributes: nsp_dir (str): Directory containing NSP files. cam_recording_dir (str): Directory containing camera recordings. nev_pool (NevPool): Stores NEV files. nsx_pool (NsxPool): Stores NS5/NS3 files. video_pool (VideoPool): Stores video files. video_json_pool (VideoJsonPool): Stores video metadata. video_file_pool (VideoFilesPool): Stores all video-related files. \"\"\" def __init__(self, nsp_dir: str, cam_recording_dir: str) -> None: \"\"\"Initializes the DataPool class. Args: nsp_dir (str): Path to the NSP directory. cam_recording_dir (str): Path to the camera recording directory. \"\"\" self.nsp_dir = nsp_dir self.cam_recording_dir = cam_recording_dir self.nev_pool = NevPool() self.nsx_pool = NsxPool() self.video_pool = VideoPool() self.video_json_pool = VideoJsonPool() self.video_file_pool = VideoFilesPool() self.init_pools() def init_pools(self): \"\"\"Initializes the pools by: 1. Populating NEV and NSX pools with corresponding files. 2. Grouping the files in the video pool by timestamp. \"\"\" for file_path in Path(self.nsp_dir).iterdir(): if file_path.suffix == \".nev\": self.nev_pool.add_file(file_path.name) elif file_path.suffix in {\".ns5\", \".ns3\"}: self.nsx_pool.add_file(file_path.name) for datefolder_path in Path(self.cam_recording_dir).iterdir(): if datefolder_path.is_dir(): for file_path in datefolder_path.iterdir(): self.video_file_pool.add_file(file_path.name) if file_path.suffix == \".mp4\": self.video_pool.add_file(file_path.name) elif file_path.suffix == \".json\": self.video_json_pool.add_file(file_path.name) def verify_integrity(self) -> bool: \"\"\"Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files: - One file matching pattern `*NSP-1.nev` - One file matching pattern `*NSP-1.ns3` - One file matching pattern `*NSP-1.ns5` - One file matching pattern `*NSP-2.nev` Returns: bool: True if exactly one of each required file is found, otherwise False. \"\"\" required_files = { \"*NSP-1.nev\": 0, \"*NSP-1.ns3\": 0, \"*NSP-1.ns5\": 0, \"*NSP-2.nev\": 0, } for file in os.listdir(self.nsp_dir): for pattern in required_files.keys(): if fnmatch.fnmatch(file, pattern): required_files[pattern] += 1 return all(count == 1 for count in required_files.values()) def get_nsp1_nev_path(self) -> str: \"\"\"Finds the NSP-1 NEV file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.nev\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" def get_nsp1_ns5_path(self) -> str: \"\"\"Finds the NSP-1 NS5 file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.ns5\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" def get_video_file_pool(self) -> \"VideoFilesPool\": \"\"\"Retrieves the video file pool. Returns: VideoFilesPool: The video file pool object. \"\"\" return self.video_file_pool cam_recording_dir = cam_recording_dir instance-attribute \u00b6 nev_pool = NevPool() instance-attribute \u00b6 nsp_dir = nsp_dir instance-attribute \u00b6 nsx_pool = NsxPool() instance-attribute \u00b6 video_file_pool = VideoFilesPool() instance-attribute \u00b6 video_json_pool = VideoJsonPool() instance-attribute \u00b6 video_pool = VideoPool() instance-attribute \u00b6 __init__(nsp_dir: str, cam_recording_dir: str) -> None \u00b6 Initializes the DataPool class. Parameters: nsp_dir ( str ) \u2013 Path to the NSP directory. cam_recording_dir ( str ) \u2013 Path to the camera recording directory. Source code in pyvideosync/data_pool.py def __init__(self, nsp_dir: str, cam_recording_dir: str) -> None: \"\"\"Initializes the DataPool class. Args: nsp_dir (str): Path to the NSP directory. cam_recording_dir (str): Path to the camera recording directory. \"\"\" self.nsp_dir = nsp_dir self.cam_recording_dir = cam_recording_dir self.nev_pool = NevPool() self.nsx_pool = NsxPool() self.video_pool = VideoPool() self.video_json_pool = VideoJsonPool() self.video_file_pool = VideoFilesPool() self.init_pools() get_nsp1_nev_path() -> str \u00b6 Finds the NSP-1 NEV file path. Returns: str ( str ) \u2013 The full path of the matching file if found, otherwise an empty string. Source code in pyvideosync/data_pool.py def get_nsp1_nev_path(self) -> str: \"\"\"Finds the NSP-1 NEV file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.nev\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" get_nsp1_ns5_path() -> str \u00b6 Finds the NSP-1 NS5 file path. Returns: str ( str ) \u2013 The full path of the matching file if found, otherwise an empty string. Source code in pyvideosync/data_pool.py def get_nsp1_ns5_path(self) -> str: \"\"\"Finds the NSP-1 NS5 file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.ns5\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" get_video_file_pool() -> 'VideoFilesPool' \u00b6 Retrieves the video file pool. Returns: VideoFilesPool ( 'VideoFilesPool' ) \u2013 The video file pool object. Source code in pyvideosync/data_pool.py def get_video_file_pool(self) -> \"VideoFilesPool\": \"\"\"Retrieves the video file pool. Returns: VideoFilesPool: The video file pool object. \"\"\" return self.video_file_pool init_pools() \u00b6 Initializes the pools by: Populating NEV and NSX pools with corresponding files. Grouping the files in the video pool by timestamp. Source code in pyvideosync/data_pool.py def init_pools(self): \"\"\"Initializes the pools by: 1. Populating NEV and NSX pools with corresponding files. 2. Grouping the files in the video pool by timestamp. \"\"\" for file_path in Path(self.nsp_dir).iterdir(): if file_path.suffix == \".nev\": self.nev_pool.add_file(file_path.name) elif file_path.suffix in {\".ns5\", \".ns3\"}: self.nsx_pool.add_file(file_path.name) for datefolder_path in Path(self.cam_recording_dir).iterdir(): if datefolder_path.is_dir(): for file_path in datefolder_path.iterdir(): self.video_file_pool.add_file(file_path.name) if file_path.suffix == \".mp4\": self.video_pool.add_file(file_path.name) elif file_path.suffix == \".json\": self.video_json_pool.add_file(file_path.name) verify_integrity() -> bool \u00b6 Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files One file matching pattern *NSP-1.nev One file matching pattern *NSP-1.ns3 One file matching pattern *NSP-1.ns5 One file matching pattern *NSP-2.nev Returns: bool ( bool ) \u2013 True if exactly one of each required file is found, otherwise False. Source code in pyvideosync/data_pool.py def verify_integrity(self) -> bool: \"\"\"Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files: - One file matching pattern `*NSP-1.nev` - One file matching pattern `*NSP-1.ns3` - One file matching pattern `*NSP-1.ns5` - One file matching pattern `*NSP-2.nev` Returns: bool: True if exactly one of each required file is found, otherwise False. \"\"\" required_files = { \"*NSP-1.nev\": 0, \"*NSP-1.ns3\": 0, \"*NSP-1.ns5\": 0, \"*NSP-2.nev\": 0, } for file in os.listdir(self.nsp_dir): for pattern in required_files.keys(): if fnmatch.fnmatch(file, pattern): required_files[pattern] += 1 return all(count == 1 for count in required_files.values()) \ud83d\udccc Supporting Classes \u00b6 NevPool \u00b6 Stores NEV files grouped by suffix. Source code in pyvideosync/data_pool.py class NevPool: \"\"\"Stores NEV files grouped by suffix.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a NEV file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file) files = defaultdict(list) instance-attribute \u00b6 __init__() -> None \u00b6 Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list) add_file(file: str) \u00b6 Adds a NEV file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a NEV file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file) NsxPool \u00b6 Stores NS5 and NS3 files grouped by suffix. Source code in pyvideosync/data_pool.py class NsxPool: \"\"\"Stores NS5 and NS3 files grouped by suffix.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds an NS5/NS3 file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file) files = defaultdict(list) instance-attribute \u00b6 __init__() -> None \u00b6 Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list) add_file(file: str) \u00b6 Adds an NS5/NS3 file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds an NS5/NS3 file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file) VideoPool \u00b6 Stores video files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoPool: \"\"\"Stores video files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a video file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file) files = defaultdict(list) instance-attribute \u00b6 __init__() -> None \u00b6 Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list) add_file(file: str) \u00b6 Adds a video file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a video file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file) VideoJsonPool \u00b6 Stores video metadata JSON files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoJsonPool: \"\"\"Stores video metadata JSON files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file) def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists all groups of video metadata files. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: files for timestamp, files in self.files.items()} files = defaultdict(list) instance-attribute \u00b6 __init__() -> None \u00b6 Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list) add_file(file: str) \u00b6 Source code in pyvideosync/data_pool.py def add_file(self, file: str): timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file) list_groups() -> dict[str, list[str]] \u00b6 Lists all groups of video metadata files. Returns: dict [ str , list [ str ]] \u2013 dict[str, list[str]]: A dictionary where keys are timestamps (str) dict [ str , list [ str ]] \u2013 and values are lists of file names (str). Source code in pyvideosync/data_pool.py def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists all groups of video metadata files. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: files for timestamp, files in self.files.items()} VideoFilesPool \u00b6 Stores all video-related files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoFilesPool: \"\"\"Stores all video-related files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a video-related file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = extract_timestamp(file) self.files[timestamp].append(file) def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists groups of files sorted by timestamp. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: self.files[timestamp] for timestamp in sorted(self.files)} def find_one_random_json(self) -> str | None: \"\"\"Finds a random JSON file in the pool. Returns: str: A JSON file name if found, otherwise None. \"\"\" for files in self.files.values(): for file in files: if file.endswith(\".json\"): return file return None def get_unique_cam_serials(self) -> set[str]: \"\"\" Returns a set of all unique camera serial numbers found in the filenames. Returns: set[str]: A set of unique camera serial numbers. \"\"\" serials = set() for files in self.files.values(): for file in files: if file.endswith(\".mp4\"): serial = extract_cam_serial(file) if serial: serials.add(serial) return serials files = defaultdict(list) instance-attribute \u00b6 __init__() -> None \u00b6 Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list) add_file(file: str) \u00b6 Adds a video-related file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a video-related file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = extract_timestamp(file) self.files[timestamp].append(file) find_one_random_json() -> str | None \u00b6 Finds a random JSON file in the pool. Returns: str ( str | None ) \u2013 A JSON file name if found, otherwise None. Source code in pyvideosync/data_pool.py def find_one_random_json(self) -> str | None: \"\"\"Finds a random JSON file in the pool. Returns: str: A JSON file name if found, otherwise None. \"\"\" for files in self.files.values(): for file in files: if file.endswith(\".json\"): return file return None get_unique_cam_serials() -> set[str] \u00b6 Returns a set of all unique camera serial numbers found in the filenames. Returns: set [ str ] \u2013 set[str]: A set of unique camera serial numbers. Source code in pyvideosync/data_pool.py def get_unique_cam_serials(self) -> set[str]: \"\"\" Returns a set of all unique camera serial numbers found in the filenames. Returns: set[str]: A set of unique camera serial numbers. \"\"\" serials = set() for files in self.files.values(): for file in files: if file.endswith(\".mp4\"): serial = extract_cam_serial(file) if serial: serials.add(serial) return serials list_groups() -> dict[str, list[str]] \u00b6 Lists groups of files sorted by timestamp. Returns: dict [ str , list [ str ]] \u2013 dict[str, list[str]]: A dictionary where keys are timestamps (str) dict [ str , list [ str ]] \u2013 and values are lists of file names (str). Source code in pyvideosync/data_pool.py def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists groups of files sorted by timestamp. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: self.files[timestamp] for timestamp in sorted(self.files)}","title":"DataPool"},{"location":"api/datapool/#datapool-api-documentation","text":"This section provides detailed documentation for pyvideosync.data_pool .","title":"\ud83d\udcc4 DataPool API Documentation"},{"location":"api/datapool/#datapool-class","text":"Manages NSP and video data for integrity verification and statistics. Attributes: nsp_dir ( str ) \u2013 Directory containing NSP files. cam_recording_dir ( str ) \u2013 Directory containing camera recordings. nev_pool ( NevPool ) \u2013 Stores NEV files. nsx_pool ( NsxPool ) \u2013 Stores NS5/NS3 files. video_pool ( VideoPool ) \u2013 Stores video files. video_json_pool ( VideoJsonPool ) \u2013 Stores video metadata. video_file_pool ( VideoFilesPool ) \u2013 Stores all video-related files. Source code in pyvideosync/data_pool.py class DataPool: \"\"\"Manages NSP and video data for integrity verification and statistics. Attributes: nsp_dir (str): Directory containing NSP files. cam_recording_dir (str): Directory containing camera recordings. nev_pool (NevPool): Stores NEV files. nsx_pool (NsxPool): Stores NS5/NS3 files. video_pool (VideoPool): Stores video files. video_json_pool (VideoJsonPool): Stores video metadata. video_file_pool (VideoFilesPool): Stores all video-related files. \"\"\" def __init__(self, nsp_dir: str, cam_recording_dir: str) -> None: \"\"\"Initializes the DataPool class. Args: nsp_dir (str): Path to the NSP directory. cam_recording_dir (str): Path to the camera recording directory. \"\"\" self.nsp_dir = nsp_dir self.cam_recording_dir = cam_recording_dir self.nev_pool = NevPool() self.nsx_pool = NsxPool() self.video_pool = VideoPool() self.video_json_pool = VideoJsonPool() self.video_file_pool = VideoFilesPool() self.init_pools() def init_pools(self): \"\"\"Initializes the pools by: 1. Populating NEV and NSX pools with corresponding files. 2. Grouping the files in the video pool by timestamp. \"\"\" for file_path in Path(self.nsp_dir).iterdir(): if file_path.suffix == \".nev\": self.nev_pool.add_file(file_path.name) elif file_path.suffix in {\".ns5\", \".ns3\"}: self.nsx_pool.add_file(file_path.name) for datefolder_path in Path(self.cam_recording_dir).iterdir(): if datefolder_path.is_dir(): for file_path in datefolder_path.iterdir(): self.video_file_pool.add_file(file_path.name) if file_path.suffix == \".mp4\": self.video_pool.add_file(file_path.name) elif file_path.suffix == \".json\": self.video_json_pool.add_file(file_path.name) def verify_integrity(self) -> bool: \"\"\"Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files: - One file matching pattern `*NSP-1.nev` - One file matching pattern `*NSP-1.ns3` - One file matching pattern `*NSP-1.ns5` - One file matching pattern `*NSP-2.nev` Returns: bool: True if exactly one of each required file is found, otherwise False. \"\"\" required_files = { \"*NSP-1.nev\": 0, \"*NSP-1.ns3\": 0, \"*NSP-1.ns5\": 0, \"*NSP-2.nev\": 0, } for file in os.listdir(self.nsp_dir): for pattern in required_files.keys(): if fnmatch.fnmatch(file, pattern): required_files[pattern] += 1 return all(count == 1 for count in required_files.values()) def get_nsp1_nev_path(self) -> str: \"\"\"Finds the NSP-1 NEV file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.nev\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" def get_nsp1_ns5_path(self) -> str: \"\"\"Finds the NSP-1 NS5 file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.ns5\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\" def get_video_file_pool(self) -> \"VideoFilesPool\": \"\"\"Retrieves the video file pool. Returns: VideoFilesPool: The video file pool object. \"\"\" return self.video_file_pool","title":"\ud83d\udccc DataPool Class"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.cam_recording_dir","text":"","title":"cam_recording_dir"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.nev_pool","text":"","title":"nev_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.nsp_dir","text":"","title":"nsp_dir"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.nsx_pool","text":"","title":"nsx_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.video_file_pool","text":"","title":"video_file_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.video_json_pool","text":"","title":"video_json_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.video_pool","text":"","title":"video_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.__init__","text":"Initializes the DataPool class. Parameters: nsp_dir ( str ) \u2013 Path to the NSP directory. cam_recording_dir ( str ) \u2013 Path to the camera recording directory. Source code in pyvideosync/data_pool.py def __init__(self, nsp_dir: str, cam_recording_dir: str) -> None: \"\"\"Initializes the DataPool class. Args: nsp_dir (str): Path to the NSP directory. cam_recording_dir (str): Path to the camera recording directory. \"\"\" self.nsp_dir = nsp_dir self.cam_recording_dir = cam_recording_dir self.nev_pool = NevPool() self.nsx_pool = NsxPool() self.video_pool = VideoPool() self.video_json_pool = VideoJsonPool() self.video_file_pool = VideoFilesPool() self.init_pools()","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.get_nsp1_nev_path","text":"Finds the NSP-1 NEV file path. Returns: str ( str ) \u2013 The full path of the matching file if found, otherwise an empty string. Source code in pyvideosync/data_pool.py def get_nsp1_nev_path(self) -> str: \"\"\"Finds the NSP-1 NEV file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.nev\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\"","title":"get_nsp1_nev_path"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.get_nsp1_ns5_path","text":"Finds the NSP-1 NS5 file path. Returns: str ( str ) \u2013 The full path of the matching file if found, otherwise an empty string. Source code in pyvideosync/data_pool.py def get_nsp1_ns5_path(self) -> str: \"\"\"Finds the NSP-1 NS5 file path. Returns: str: The full path of the matching file if found, otherwise an empty string. \"\"\" pattern = \"*NSP-1.ns5\" for file in os.listdir(self.nsp_dir): if fnmatch.fnmatch(file, pattern): return os.path.join(self.nsp_dir, file) return \"\"","title":"get_nsp1_ns5_path"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.get_video_file_pool","text":"Retrieves the video file pool. Returns: VideoFilesPool ( 'VideoFilesPool' ) \u2013 The video file pool object. Source code in pyvideosync/data_pool.py def get_video_file_pool(self) -> \"VideoFilesPool\": \"\"\"Retrieves the video file pool. Returns: VideoFilesPool: The video file pool object. \"\"\" return self.video_file_pool","title":"get_video_file_pool"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.init_pools","text":"Initializes the pools by: Populating NEV and NSX pools with corresponding files. Grouping the files in the video pool by timestamp. Source code in pyvideosync/data_pool.py def init_pools(self): \"\"\"Initializes the pools by: 1. Populating NEV and NSX pools with corresponding files. 2. Grouping the files in the video pool by timestamp. \"\"\" for file_path in Path(self.nsp_dir).iterdir(): if file_path.suffix == \".nev\": self.nev_pool.add_file(file_path.name) elif file_path.suffix in {\".ns5\", \".ns3\"}: self.nsx_pool.add_file(file_path.name) for datefolder_path in Path(self.cam_recording_dir).iterdir(): if datefolder_path.is_dir(): for file_path in datefolder_path.iterdir(): self.video_file_pool.add_file(file_path.name) if file_path.suffix == \".mp4\": self.video_pool.add_file(file_path.name) elif file_path.suffix == \".json\": self.video_json_pool.add_file(file_path.name)","title":"init_pools"},{"location":"api/datapool/#pyvideosync.data_pool.DataPool.verify_integrity","text":"Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files One file matching pattern *NSP-1.nev One file matching pattern *NSP-1.ns3 One file matching pattern *NSP-1.ns5 One file matching pattern *NSP-2.nev Returns: bool ( bool ) \u2013 True if exactly one of each required file is found, otherwise False. Source code in pyvideosync/data_pool.py def verify_integrity(self) -> bool: \"\"\"Verifies the integrity of the directory by ensuring it contains exactly one of each required file. Required files: - One file matching pattern `*NSP-1.nev` - One file matching pattern `*NSP-1.ns3` - One file matching pattern `*NSP-1.ns5` - One file matching pattern `*NSP-2.nev` Returns: bool: True if exactly one of each required file is found, otherwise False. \"\"\" required_files = { \"*NSP-1.nev\": 0, \"*NSP-1.ns3\": 0, \"*NSP-1.ns5\": 0, \"*NSP-2.nev\": 0, } for file in os.listdir(self.nsp_dir): for pattern in required_files.keys(): if fnmatch.fnmatch(file, pattern): required_files[pattern] += 1 return all(count == 1 for count in required_files.values())","title":"verify_integrity"},{"location":"api/datapool/#supporting-classes","text":"","title":"\ud83d\udccc Supporting Classes"},{"location":"api/datapool/#nevpool","text":"Stores NEV files grouped by suffix. Source code in pyvideosync/data_pool.py class NevPool: \"\"\"Stores NEV files grouped by suffix.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a NEV file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file)","title":"NevPool"},{"location":"api/datapool/#pyvideosync.data_pool.NevPool.files","text":"","title":"files"},{"location":"api/datapool/#pyvideosync.data_pool.NevPool.__init__","text":"Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list)","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.NevPool.add_file","text":"Adds a NEV file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a NEV file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file)","title":"add_file"},{"location":"api/datapool/#nsxpool","text":"Stores NS5 and NS3 files grouped by suffix. Source code in pyvideosync/data_pool.py class NsxPool: \"\"\"Stores NS5 and NS3 files grouped by suffix.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds an NS5/NS3 file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file)","title":"NsxPool"},{"location":"api/datapool/#pyvideosync.data_pool.NsxPool.files","text":"","title":"files"},{"location":"api/datapool/#pyvideosync.data_pool.NsxPool.__init__","text":"Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list)","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.NsxPool.add_file","text":"Adds an NS5/NS3 file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds an NS5/NS3 file to the pool. Args: file (str): File name to be added. \"\"\" suffix = file.split(\"-\")[-1] self.files[suffix].append(file)","title":"add_file"},{"location":"api/datapool/#videopool","text":"Stores video files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoPool: \"\"\"Stores video files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a video file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file)","title":"VideoPool"},{"location":"api/datapool/#pyvideosync.data_pool.VideoPool.files","text":"","title":"files"},{"location":"api/datapool/#pyvideosync.data_pool.VideoPool.__init__","text":"Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list)","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.VideoPool.add_file","text":"Adds a video file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a video file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file)","title":"add_file"},{"location":"api/datapool/#videojsonpool","text":"Stores video metadata JSON files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoJsonPool: \"\"\"Stores video metadata JSON files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file) def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists all groups of video metadata files. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: files for timestamp, files in self.files.items()}","title":"VideoJsonPool"},{"location":"api/datapool/#pyvideosync.data_pool.VideoJsonPool.files","text":"","title":"files"},{"location":"api/datapool/#pyvideosync.data_pool.VideoJsonPool.__init__","text":"Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list)","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.VideoJsonPool.add_file","text":"Source code in pyvideosync/data_pool.py def add_file(self, file: str): timestamp = file.split(\"_\")[-1].split(\".\")[0] self.files[timestamp].append(file)","title":"add_file"},{"location":"api/datapool/#pyvideosync.data_pool.VideoJsonPool.list_groups","text":"Lists all groups of video metadata files. Returns: dict [ str , list [ str ]] \u2013 dict[str, list[str]]: A dictionary where keys are timestamps (str) dict [ str , list [ str ]] \u2013 and values are lists of file names (str). Source code in pyvideosync/data_pool.py def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists all groups of video metadata files. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: files for timestamp, files in self.files.items()}","title":"list_groups"},{"location":"api/datapool/#videofilespool","text":"Stores all video-related files grouped by timestamp. Source code in pyvideosync/data_pool.py class VideoFilesPool: \"\"\"Stores all video-related files grouped by timestamp.\"\"\" def __init__(self) -> None: self.files = defaultdict(list) def add_file(self, file: str): \"\"\"Adds a video-related file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = extract_timestamp(file) self.files[timestamp].append(file) def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists groups of files sorted by timestamp. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: self.files[timestamp] for timestamp in sorted(self.files)} def find_one_random_json(self) -> str | None: \"\"\"Finds a random JSON file in the pool. Returns: str: A JSON file name if found, otherwise None. \"\"\" for files in self.files.values(): for file in files: if file.endswith(\".json\"): return file return None def get_unique_cam_serials(self) -> set[str]: \"\"\" Returns a set of all unique camera serial numbers found in the filenames. Returns: set[str]: A set of unique camera serial numbers. \"\"\" serials = set() for files in self.files.values(): for file in files: if file.endswith(\".mp4\"): serial = extract_cam_serial(file) if serial: serials.add(serial) return serials","title":"VideoFilesPool"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.files","text":"","title":"files"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.__init__","text":"Source code in pyvideosync/data_pool.py def __init__(self) -> None: self.files = defaultdict(list)","title":"__init__"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.add_file","text":"Adds a video-related file to the pool. Parameters: file ( str ) \u2013 File name to be added. Source code in pyvideosync/data_pool.py def add_file(self, file: str): \"\"\"Adds a video-related file to the pool. Args: file (str): File name to be added. \"\"\" timestamp = extract_timestamp(file) self.files[timestamp].append(file)","title":"add_file"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.find_one_random_json","text":"Finds a random JSON file in the pool. Returns: str ( str | None ) \u2013 A JSON file name if found, otherwise None. Source code in pyvideosync/data_pool.py def find_one_random_json(self) -> str | None: \"\"\"Finds a random JSON file in the pool. Returns: str: A JSON file name if found, otherwise None. \"\"\" for files in self.files.values(): for file in files: if file.endswith(\".json\"): return file return None","title":"find_one_random_json"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.get_unique_cam_serials","text":"Returns a set of all unique camera serial numbers found in the filenames. Returns: set [ str ] \u2013 set[str]: A set of unique camera serial numbers. Source code in pyvideosync/data_pool.py def get_unique_cam_serials(self) -> set[str]: \"\"\" Returns a set of all unique camera serial numbers found in the filenames. Returns: set[str]: A set of unique camera serial numbers. \"\"\" serials = set() for files in self.files.values(): for file in files: if file.endswith(\".mp4\"): serial = extract_cam_serial(file) if serial: serials.add(serial) return serials","title":"get_unique_cam_serials"},{"location":"api/datapool/#pyvideosync.data_pool.VideoFilesPool.list_groups","text":"Lists groups of files sorted by timestamp. Returns: dict [ str , list [ str ]] \u2013 dict[str, list[str]]: A dictionary where keys are timestamps (str) dict [ str , list [ str ]] \u2013 and values are lists of file names (str). Source code in pyvideosync/data_pool.py def list_groups(self) -> dict[str, list[str]]: \"\"\"Lists groups of files sorted by timestamp. Returns: dict[str, list[str]]: A dictionary where keys are timestamps (str) and values are lists of file names (str). \"\"\" return {timestamp: self.files[timestamp] for timestamp in sorted(self.files)}","title":"list_groups"},{"location":"api/nev/","text":"","title":"Nev"},{"location":"api/nsx/","text":"","title":"Nsx"},{"location":"api/pathutils/","text":"","title":"Pathutils"},{"location":"api/utils/","text":"","title":"Utils"},{"location":"api/video/","text":"","title":"Video"},{"location":"api/videojson/","text":"","title":"Videojson"},{"location":"developer-guide/","text":"\ud83d\udee0\ufe0f Developer Guide \u00b6 Welcome to the Developer Guide for video-sync . This section provides a deep dive into the internal workings of the project, covering: Program Flow : How the tool processes and synchronizes data. Edge Cases : Real-world scenarios and solutions. Contributing : How developers can contribute to the project.","title":"Overview"},{"location":"developer-guide/#developer-guide","text":"Welcome to the Developer Guide for video-sync . This section provides a deep dive into the internal workings of the project, covering: Program Flow : How the tool processes and synchronizes data. Edge Cases : Real-world scenarios and solutions. Contributing : How developers can contribute to the project.","title":"\ud83d\udee0\ufe0f Developer Guide"},{"location":"developer-guide/contributing/","text":"\ud83e\udd1d Contributing Guide \u00b6 Want to contribute? Follow these steps:","title":"Contributing"},{"location":"developer-guide/contributing/#contributing-guide","text":"Want to contribute? Follow these steps:","title":"\ud83e\udd1d Contributing Guide"},{"location":"developer-guide/edge-cases/","text":"\u26a0\ufe0f Edge Cases & Real Examples \u00b6 This section highlights real-world edge cases encountered when synchronizing video and neural data. Each example provides a problem description, a sample JSON snippet, analysis, and a possible solution. 1\ufe0f\u20e3 Frame Counter Anomalies \u00b6 \ud83e\uddd0 Problem \u00b6 In some cases, the JSON metadata file may show frame counters that jump unexpectedly. However, the total frame count remains consistent across multiple verification methods, suggesting that frames are not actually lost. \ud83d\udcc4 Example JSON (Incorrect Frame Sequence) \u00b6 { \"frames\": [ [19393, 19393, 19392, 19393, 19392], [19400, 19400, 19399, 19400, 19399] ] } In this case, the frame IDs jump from 19392 to 19399 , which may indicate a counter issue. \ud83d\udd0d Observations \u00b6 The JSON metadata suggests that frames skip from 19392 \u2192 19399. However, when checking the total number of frames in the JSON: >>> len(yfb_json[\"frame_id\"]) 18000 it still returns 18000 frames, meaning that the frames exist but their numbering is inconsistent. Similarly, probing the corresponding MP4 video file also returns 18000 frames, further confirming that no frames are missing. \ud83d\udcdd Conclusion \u00b6 This issue is not a missing frame problem, but rather a frame counter anomaly. \ud83d\udcc2 Download Reference JSON File \u00b6 You can download the example JSON file here: \ud83d\udce5 Download YFB_20240505_133351.json","title":"Edge Cases"},{"location":"developer-guide/edge-cases/#edge-cases-real-examples","text":"This section highlights real-world edge cases encountered when synchronizing video and neural data. Each example provides a problem description, a sample JSON snippet, analysis, and a possible solution.","title":"\u26a0\ufe0f Edge Cases &amp; Real Examples"},{"location":"developer-guide/edge-cases/#1-frame-counter-anomalies","text":"","title":"1\ufe0f\u20e3 Frame Counter Anomalies"},{"location":"developer-guide/edge-cases/#problem","text":"In some cases, the JSON metadata file may show frame counters that jump unexpectedly. However, the total frame count remains consistent across multiple verification methods, suggesting that frames are not actually lost.","title":"\ud83e\uddd0 Problem"},{"location":"developer-guide/edge-cases/#example-json-incorrect-frame-sequence","text":"{ \"frames\": [ [19393, 19393, 19392, 19393, 19392], [19400, 19400, 19399, 19400, 19399] ] } In this case, the frame IDs jump from 19392 to 19399 , which may indicate a counter issue.","title":"\ud83d\udcc4 Example JSON (Incorrect Frame Sequence)"},{"location":"developer-guide/edge-cases/#observations","text":"The JSON metadata suggests that frames skip from 19392 \u2192 19399. However, when checking the total number of frames in the JSON: >>> len(yfb_json[\"frame_id\"]) 18000 it still returns 18000 frames, meaning that the frames exist but their numbering is inconsistent. Similarly, probing the corresponding MP4 video file also returns 18000 frames, further confirming that no frames are missing.","title":"\ud83d\udd0d Observations"},{"location":"developer-guide/edge-cases/#conclusion","text":"This issue is not a missing frame problem, but rather a frame counter anomaly.","title":"\ud83d\udcdd Conclusion"},{"location":"developer-guide/edge-cases/#download-reference-json-file","text":"You can download the example JSON file here: \ud83d\udce5 Download YFB_20240505_133351.json","title":"\ud83d\udcc2 Download Reference JSON File"},{"location":"developer-guide/program-flow/","text":"\ud83d\udd04 Program Flow \u00b6 This section explains the data processing flow of video-sync .","title":"Program Flow"},{"location":"developer-guide/program-flow/#program-flow","text":"This section explains the data processing flow of video-sync .","title":"\ud83d\udd04 Program Flow"}]}